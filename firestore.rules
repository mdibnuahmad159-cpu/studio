/**
 * @file Firebase Security Rules for the school management app.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access by enforcing strict ownership and role-based access control.
 * Data access is generally restricted to authenticated users, with distinctions made between different collections.
 *
 * Data Structure:
 * The Firestore database is structured with top-level collections for `gurus`, `siswa`, `kurikulum`, `jadwal`, `raports`, and `nilai`.
 * Each collection stores documents representing the respective entities (teachers, students, curricula, schedules, reports, and grades).
 *
 * Key Security Decisions:
 * - Unauthenticated users are not granted any data access.
 * - Listing of documents is generally disallowed except where explicitly granted, to prevent unauthorized data discovery.
 * - All write operations are secured to prevent unauthorized modification of data.
 *
 * Denormalization for Authorization:
 * No denormalization is required, as the current authorization needs are met by checking document IDs and auth UIDs.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Controls access to the `gurus` collection. Only authenticated users can read or write teacher profiles.
     * @path /databases/{database}/documents/gurus/{guruId}
     * @allow (get, list): Any authenticated user can read guru profiles.
     * @allow (create, update, delete): Only authenticated users can create, update, or delete guru profiles.
     * @deny  (get, list): Unauthenticated users cannot read guru profiles.
     * @deny  (create, update, delete): Unauthenticated users cannot create, update, or delete guru profiles.
     * @principle Authenticated access for profiles.
     */
    match /gurus/{guruId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to the `siswa` collection. Only authenticated users can read or write student profiles.
     * @path /databases/{database}/documents/siswa/{siswaId}
     * @allow (get, list): Any authenticated user can read student profiles.
     * @allow (create, update, delete): Only authenticated users can create, update, or delete student profiles.
     * @deny  (get, list): Unauthenticated users cannot read student profiles.
     * @deny  (create, update, delete): Unauthenticated users cannot create, update, or delete student profiles.
     * @principle Authenticated access for profiles.
     */
    match /siswa/{siswaId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to the `kurikulum` collection. Only authenticated users can read or write curriculum data.
     * @path /databases/{database}/documents/kurikulum/{kurikulumId}
     * @allow (get, list): Any authenticated user can read curriculum data.
     * @allow (create, update, delete): Only authenticated users can create, update, or delete curriculum data.
     * @deny  (get, list): Unauthenticated users cannot read curriculum data.
     * @deny  (create, update, delete): Unauthenticated users cannot create, update, or delete curriculum data.
     * @principle Authenticated access for curriculum data.
     */
    match /kurikulum/{kurikulumId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to the `jadwal` collection. Only authenticated users can read or write schedule data.
     * @path /databases/{database}/documents/jadwal/{jadwalId}
     * @allow (get, list): Any authenticated user can read schedule data.
     * @allow (create, update, delete): Only authenticated users can create, update, or delete schedule data.
     * @deny  (get, list): Unauthenticated users cannot read schedule data.
     * @deny  (create, update, delete): Unauthenticated users cannot create, update, or delete schedule data.
     * @principle Authenticated access for schedule data.
     */
    match /jadwal/{jadwalId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to the `raports` collection. Only authenticated users can read or write report data.
     * @path /databases/{database}/documents/raports/{raportId}
     * @allow (get, list): Any authenticated user can read report data.
     * @allow (create, update, delete): Only authenticated users can create, update, or delete report data.
     * @deny  (get, list): Unauthenticated users cannot read report data.
     * @deny  (create, update, delete): Unauthenticated users cannot create, update, or delete report data.
     * @principle Authenticated access for report data.
     */
    match /raports/{raportId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to the `nilai` collection. Only authenticated users can read or write grade data.
     * @path /databases/{database}/documents/nilai/{nilaiId}
     * @allow (get, list): Any authenticated user can read grade data.
     * @allow (create, update, delete): Only authenticated users can create, update, or delete grade data.
     * @deny  (get, list): Unauthenticated users cannot read grade data.
     * @deny  (create, update, delete): Unauthenticated users cannot create, update, or delete grade data.
     * @principle Authenticated access for grade data.
     */
    match /nilai/{nilaiId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}