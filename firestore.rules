/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a public-read, owner-write model for all data.
 * All collections are publicly readable, but write access is restricted to authorized users.
 *
 * Data Structure:
 * The Firestore database consists of the following top-level collections:
 * - /gurus/{guruId}: Stores teacher profiles.
 * - /siswa/{siswaId}: Stores student profiles. Document ID is the student's NIS.
 * - /kurikulum/{kurikulumId}: Stores curriculum/subject data.
 * - /jadwal/{jadwalId}: Stores class schedule entries.
 * - /raports/{raportId}: Stores student report card data. Document ID is the student's NIS.
 *
 * Key Security Decisions:
 * - Public Read: All collections are publicly readable.
 * - Owner-Only Writes: Write access (create, update, delete) is restricted to authorized users.
 * - No User Listing: Listing all users is not permitted.
 *
 * Denormalization for Authorization:
 * This ruleset assumes an ownership field (e.g., 'ownerId', 'authorId') exists within each document
 * in the collections for write operations. This field is used to verify ownership during create,
 * update, and delete operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to the 'gurus' collection and restricts write access to authenticated users.
     * @path /databases/{database}/documents/gurus/{guruId}
     * @allow (get, list): Any user can read guru profiles.
     * @allow (create): Only an authenticated user can create a guru profile, provided the 'guruId' field matches their UID.
     * @allow (update, delete): Only the authenticated user who created the guru profile can modify or delete it.
     * @deny create: if the guruId in the request does not match the authenticated user's UID.
     * @deny update: if the authenticated user is not the owner of the guru profile.
     * @deny delete: if the authenticated user is not the owner of the guru profile.
     * @principle Enforces public read and owner-only write access to the 'gurus' collection.
     */
    match /gurus/{guruId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to the 'siswa' collection and restricts write access to authenticated users.
     * @path /databases/{database}/documents/siswa/{siswaId}
     * @allow (get, list): Any user can read siswa profiles.
     * @allow (create): Only an authenticated user can create a siswa profile.
     * @allow (update, delete): Only the authenticated user who created the siswa profile can modify or delete it.
     * @deny create: if the siswaId in the request does not match the authenticated user's UID.
     * @deny update: if the authenticated user is not the owner of the siswa profile.
     * @deny delete: if the authenticated user is not the owner of the siswa profile.
     * @principle Enforces public read and owner-only write access to the 'siswa' collection.
     */
    match /siswa/{siswaId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to the 'kurikulum' collection and restricts write access to authenticated users.
     * @path /databases/{database}/documents/kurikulum/{kurikulumId}
     * @allow (get, list): Any user can read kurikulum data.
     * @allow (create): Only an authenticated user can create kurikulum data.
     * @allow (update, delete): Only the authenticated user who created the kurikulum data can modify or delete it.
     * @deny create: if the kurikulumId in the request does not match the authenticated user's UID.
     * @deny update: if the authenticated user is not the owner of the kurikulum data.
     * @deny delete: if the authenticated user is not the owner of the kurikulum data.
     * @principle Enforces public read and owner-only write access to the 'kurikulum' collection.
     */
    match /kurikulum/{kurikulumId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to the 'jadwal' collection and restricts write access to authenticated users.
     * @path /databases/{database}/documents/jadwal/{jadwalId}
     * @allow (get, list): Any user can read jadwal data.
     * @allow (create): Only an authenticated user can create jadwal data.
     * @allow (update, delete): Only the authenticated user who created the jadwal data can modify or delete it.
     * @deny create: if the jadwalId in the request does not match the authenticated user's UID.
     * @deny update: if the authenticated user is not the owner of the jadwal data.
     * @deny delete: if the authenticated user is not the owner of the jadwal data.
     * @principle Enforces public read and owner-only write access to the 'jadwal' collection.
     */
    match /jadwal/{jadwalId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to the 'raports' collection and restricts write access to authenticated users.
     * @path /databases/{database}/documents/raports/{raportId}
     * @allow (get, list): Any user can read raport data.
     * @allow (create): Only an authenticated user can create raport data.
     * @allow (update, delete): Only the authenticated user who created the raport data can modify or delete it.
     * @deny create: if the raportId in the request does not match the authenticated user's UID.
     * @deny update: if the authenticated user is not the owner of the raport data.
     * @deny delete: if the authenticated user is not the owner of the raport data.
     * @principle Enforces public read and owner-only write access to the 'raports' collection.
     */
    match /raports/{raportId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}