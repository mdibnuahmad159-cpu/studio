/**
 * @fileoverview Firestore Security Rules for VibrantEdu.
 *
 * Core Philosophy:
 * This ruleset enforces a basic security model where all collections are read-accessible to anyone, but write-protected to authenticated users who "own" the resource.  This means anyone can read the data, but only the user that created the data can modify or delete it.
 *
 * Data Structure:
 * The database consists of three top-level collections: /gurus/{guruId}, /siswa/{siswaId}, and /kurikulum/{kurikulumId}.
 *
 * Key Security Decisions:
 * - Public Read Access: All collections are readable by any user, authenticated or not.
 * - Owner-Only Writes: Only the authenticated user whose ID matches an ownership field can create, update, or delete documents.
 * - No User Listing: Listing all users is not permitted.
 *
 * Denormalization for Authorization:
 *  - Each document needs an `ownerId` field. During creation, the `ownerId` must match the authenticated user's UID.
 *  - During updates and deletes, the `ownerId` in the existing document must match the authenticated user's UID.
 *
 * Structural Segregation:
 *  - Data is segregated into top-level collections based on entity type.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to all gurus and restricts write access to the user who owns the guru profile.
     * @path /gurus/{guruId}
     * @allow (get, list): Any user can read the guru profile.
     * @allow (create): Authenticated user can create a guru profile where request.auth.uid matches request.resource.data.id.
     * @allow (update, delete): Authenticated user can update/delete a guru profile where request.auth.uid matches resource.data.id and the document exists.
     * @deny (create): Any unauthenticated user attempts to create a guru profile.
     * @deny (update, delete): Any unauthenticated user attempts to update/delete a guru profile or the guru profile does not exist.
     * @deny (create): Authenticated user attempts to create a guru profile where request.auth.uid does not match request.resource.data.id.
     * @deny (update, delete): Authenticated user attempts to update/delete a guru profile where request.auth.uid does not match resource.data.id.
     * @principle Enforces document ownership for writes and allows public reads.
     */
    match /gurus/{guruId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(guruId);
      allow delete: if isSignedIn() && isExistingOwner(guruId);
    }

    /**
     * @description Allows read access to all siswa and restricts write access to the user who owns the siswa profile.
     * @path /siswa/{siswaId}
     * @allow (get, list): Any user can read the siswa profile.
     * @allow (create): Authenticated user can create a siswa profile where request.auth.uid matches request.resource.data.id.
     * @allow (update, delete): Authenticated user can update/delete a siswa profile where request.auth.uid matches resource.data.id and the document exists.
     * @deny (create): Any unauthenticated user attempts to create a siswa profile.
     * @deny (update, delete): Any unauthenticated user attempts to update/delete a siswa profile or the siswa profile does not exist.
     * @deny (create): Authenticated user attempts to create a siswa profile where request.auth.uid does not match request.resource.data.id.
     * @deny (update, delete): Authenticated user attempts to update/delete a siswa profile where request.auth.uid does not match resource.data.id.
     * @principle Enforces document ownership for writes and allows public reads.
     */
    match /siswa/{siswaId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(siswaId);
      allow delete: if isSignedIn() && isExistingOwner(siswaId);
    }

    /**
     * @description Allows read access to all kurikulum and restricts write access to the user who owns the kurikulum profile.
     * @path /kurikulum/{kurikulumId}
     * @allow (get, list): Any user can read the kurikulum data.
     * @allow (create): Authenticated user can create a kurikulum where request.auth.uid matches request.resource.data.id.
     * @allow (update, delete): Authenticated user can update/delete a kurikulum where request.auth.uid matches resource.data.id and the document exists.
     * @deny (create): Any unauthenticated user attempts to create a kurikulum.
     * @deny (update, delete): Any unauthenticated user attempts to update/delete a kurikulum or the kurikulum does not exist.
     * @deny (create): Authenticated user attempts to create a kurikulum where request.auth.uid does not match request.resource.data.id.
     * @deny (update, delete): Authenticated user attempts to update/delete a kurikulum where request.auth.uid does not match resource.data.id.
     * @principle Enforces document ownership for writes and allows public reads.
     */
    match /kurikulum/{kurikulumId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(kurikulumId);
      allow delete: if isSignedIn() && isExistingOwner(kurikulumId);
    }

    // ========================= Helper Functions =========================

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to check.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and the document exists.
     * @param {string} userId The user ID to check.
     * @return True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(documentId) {
      return isOwner(documentId) && resource != null;
    }
  }
}